// Test generated by RoostGPT for test flightReservation using AI Type Open AI and AI Model gpt-4

package com.flightreservation.flightreservation.services;

import com.flightreservation.flightreservation.domains.Flight;
import com.flightreservation.flightreservation.domains.Passenger;
import com.flightreservation.flightreservation.domains.Reservation;
import com.flightreservation.flightreservation.dto.ReservationRequest;
import com.flightreservation.flightreservation.exceptions.FlightNotFound;
import com.flightreservation.flightreservation.repositories.FlightRepository;
import com.flightreservation.flightreservation.repositories.PassengerRepository;
import com.flightreservation.flightreservation.repositories.ReservationRepository;
import com.flightreservation.flightreservation.util.EmailUtil;
import com.flightreservation.flightreservation.util.PdfGenerator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class ReservationServiceImpl_bookFlight_c4771443f5_Test {

    @InjectMocks
    private ReservationServiceImpl reservationService;

    @Mock
    private FlightRepository flightRepository;

    @Mock
    private PassengerRepository passengerRepository;

    @Mock
    private ReservationRepository reservationRepository;

    @Mock
    private EmailUtil emailUtil;

    @Mock
    private PdfGenerator pdfGenerator;

    private ReservationRequest reservationRequest;
    private Flight flight;
    private Passenger passenger;
    private Reservation reservation;

    @BeforeEach
    void setUp() {
        reservationRequest = new ReservationRequest();
        reservationRequest.setFlightId(1L);
        reservationRequest.setPassengerFirstName("John");
        reservationRequest.setPassengerLastName("Doe");
        reservationRequest.setPassengerEmail("johndoe@example.com");
        reservationRequest.setPassengerPhone("1234567890");

        flight = new Flight();
        flight.setId(1L);

        passenger = new Passenger();
        passenger.setId(1L);
        passenger.setFirstName("John");
        passenger.setLastName("Doe");
        passenger.setEmail("johndoe@example.com");
        passenger.setPhone("1234567890");

        reservation = new Reservation();
        reservation.setId(1L);
        reservation.setFlight(flight);
        reservation.setPassenger(passenger);
        reservation.setCheckedin(false);
    }

    @Test
    void testBookFlight_Success() {
        when(flightRepository.findById(reservationRequest.getFlightId())).thenReturn(Optional.of(flight));
        when(passengerRepository.save(any(Passenger.class))).thenReturn(passenger);
        when(reservationRepository.save(any(Reservation.class))).thenReturn(reservation);

        Reservation actualReservation = reservationService.bookFlight(reservationRequest);

        verify(flightRepository, times(1)).findById(reservationRequest.getFlightId());
        verify(passengerRepository, times(1)).save(any(Passenger.class));
        verify(reservationRepository, times(1)).save(any(Reservation.class));

        assertEquals(reservation, actualReservation);
    }

    @Test
    void testBookFlight_FlightNotFound() {
        when(flightRepository.findById(reservationRequest.getFlightId())).thenReturn(Optional.empty());

        assertThrows(FlightNotFound.class, () -> reservationService.bookFlight(reservationRequest));

        verify(flightRepository, times(1)).findById(reservationRequest.getFlightId());
        verify(passengerRepository, times(0)).save(any(Passenger.class));
        verify(reservationRepository, times(0)).save(any(Reservation.class));
    }
}
