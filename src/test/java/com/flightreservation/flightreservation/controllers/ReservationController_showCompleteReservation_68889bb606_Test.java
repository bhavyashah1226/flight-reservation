// Test generated by RoostGPT for test flightReservation using AI Type Open AI and AI Model gpt-4

package com.flightreservation.flightreservation.controllers;

import com.flightreservation.flightreservation.domains.Flight;
import com.flightreservation.flightreservation.dto.ReservationRequest;
import com.flightreservation.flightreservation.exceptions.FlightNotFound;
import com.flightreservation.flightreservation.repositories.FlightRepository;
import com.flightreservation.flightreservation.services.ReservationService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.ui.ModelMap;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class ReservationController_showCompleteReservation_68889bb606_Test {

    @InjectMocks
    private ReservationController reservationController;

    @Mock
    private FlightRepository flightRepository;

    @Mock
    private ModelMap modelMap;

    @BeforeEach
    public void setUp() {
        reservationController = new ReservationController();
    }

    @Test
    public void testShowCompleteReservation_FlightExists() {
        Long flightId = 1L;
        Flight flight = new Flight();
        flight.setId(flightId);
        when(flightRepository.findById(flightId)).thenReturn(Optional.of(flight));
        String viewName = reservationController.showCompleteReservation(flightId, modelMap);
        verify(modelMap, times(1)).addAttribute("flight", flight);
        assertEquals("reservation/completeReservation", viewName);
    }

    @Test
    public void testShowCompleteReservation_FlightDoesNotExist() {
        Long flightId = 1L;
        when(flightRepository.findById(flightId)).thenReturn(Optional.empty());
        Exception exception = assertThrows(FlightNotFound.class, () -> {
            reservationController.showCompleteReservation(flightId, modelMap);
        });
        String expectedMessage = "flightId " + flightId;
        String actualMessage = exception.getMessage();
        assertTrue(actualMessage.contains(expectedMessage));
    }
}
