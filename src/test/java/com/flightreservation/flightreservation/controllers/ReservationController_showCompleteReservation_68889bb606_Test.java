// Test generated by RoostGPT for test flightReservation using AI Type Open AI and AI Model gpt-4

package com.flightreservation.flightreservation.controllers;

import com.flightreservation.flightreservation.domains.Flight;
import com.flightreservation.flightreservation.exceptions.FlightNotFound;
import com.flightreservation.flightreservation.repositories.FlightRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.ui.ModelMap;

import java.util.Optional;

import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.when;
import static org.junit.Assert.assertEquals;

@RunWith(MockitoJUnitRunner.class)
public class ReservationController_showCompleteReservation_68889bb606_Test {

    @InjectMocks
    ReservationController reservationController;

    @Mock
    FlightRepository flightRepository;

    @Mock
    ModelMap modelMap;

    private static final Long FLIGHT_ID = 1L;

    @Before
    public void setUp() {
        Flight flight = new Flight();
        flight.setId(FLIGHT_ID);
        when(flightRepository.findById(FLIGHT_ID)).thenReturn(Optional.of(flight));
    }

    @Test
    public void testShowCompleteReservation_Success() {
        String viewName = reservationController.showCompleteReservation(FLIGHT_ID, modelMap);
        assertEquals("reservation/completeReservation", viewName);
    }

    @Test(expected = FlightNotFound.class)
    public void testShowCompleteReservation_FlightNotFound() {
        when(flightRepository.findById(anyLong())).thenReturn(Optional.empty());
        reservationController.showCompleteReservation(2L, modelMap);
    }
}
