// Test generated by RoostGPT for test flightReservation using AI Type Open AI and AI Model gpt-4

package com.flightreservation.flightreservation.controllers;

import com.flightreservation.flightreservation.domains.User;
import com.flightreservation.flightreservation.exceptions.UserAlreadyRegistered;
import com.flightreservation.flightreservation.exceptions.UserNotFound;
import com.flightreservation.flightreservation.repositories.UserRepository;
import com.flightreservation.flightreservation.services.SecurityService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.junit.runner.RunWith;
import org.junit.Test;
import java.util.Optional;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

@RunWith(SpringRunner.class)
@SpringBootTest
public class UserController_showRegistrationPage_14b9a0a43f_Test {

    @MockBean
    private UserRepository userRepository;

    @MockBean
    private SecurityService securityService;

    @Autowired
    private UserController userController;

    @Test
    public void testShowRegistrationPage() {
        String expected = "login/registerUser";
        String actual = userController.showRegistrationPage();
        assertEquals(expected, actual);
    }

    @Test
    public void testShowRegistrationPage_LogInfo() {
        Logger logger = LoggerFactory.getLogger(UserController.class);
        Logger spyLogger = spy(logger);
        doNothing().when(spyLogger).info(anyString());
        userController.showRegistrationPage();
        verify(spyLogger, times(1)).info("Inside showRegistrationPage()");
    }
}
