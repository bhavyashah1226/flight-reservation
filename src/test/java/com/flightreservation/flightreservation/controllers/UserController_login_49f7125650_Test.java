// Test generated by RoostGPT for test flightReservation using AI Type Open AI and AI Model gpt-4

package com.flightreservation.flightreservation.controllers;

import com.flightreservation.flightreservation.domains.User;
import com.flightreservation.flightreservation.exceptions.UserNotFound;
import com.flightreservation.flightreservation.repositories.UserRepository;
import com.flightreservation.flightreservation.services.SecurityService;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.ui.ModelMap;

import java.util.Optional;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class UserController_login_49f7125650_Test {

    @InjectMocks
    private UserController userController;

    @Mock
    private UserRepository userRepository;

    @Mock
    private SecurityService securityService;

    private ModelMap modelMap;
    private String email;
    private String password;

    @Before
    public void setUp() {
        modelMap = new ModelMap();
        email = "test@test.com";
        password = "password";
    }

    @Test
    public void testLoginSuccess() {
        when(userRepository.findByEmail(email)).thenReturn(Optional.of(new User()));
        when(securityService.login(email, password)).thenReturn(true);

        String viewName = userController.login(email, password, modelMap);

        assertEquals("flights/findFlights", viewName);
        assertEquals("Successfully logged in", modelMap.get("msg"));
    }

    @Test(expected = UserNotFound.class)
    public void testLoginUserNotFound() {
        when(userRepository.findByEmail(email)).thenReturn(Optional.empty());

        userController.login(email, password, modelMap);
    }

    @Test
    public void testLoginInvalidCredentials() {
        when(userRepository.findByEmail(email)).thenReturn(Optional.of(new User()));
        when(securityService.login(email, password)).thenReturn(false);

        String viewName = userController.login(email, password, modelMap);

        assertEquals("login/login", viewName);
        assertEquals("Invalid username or password", modelMap.get("msg"));
    }
}
