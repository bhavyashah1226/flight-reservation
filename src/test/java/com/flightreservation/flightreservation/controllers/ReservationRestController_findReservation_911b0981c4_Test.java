// Test generated by RoostGPT for test flightReservation using AI Type Open AI and AI Model gpt-4

package com.flightreservation.flightreservation.controllers;

import com.flightreservation.flightreservation.domains.Reservation;
import com.flightreservation.flightreservation.dto.ReservationUpdateRequest;
import com.flightreservation.flightreservation.exceptions.ReservationNotFound;
import com.flightreservation.flightreservation.repositories.ReservationRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class ReservationRestController_findReservation_911b0981c4_Test {

    @InjectMocks
    ReservationRestController reservationRestController;

    @Mock
    ReservationRepository reservationRepository;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testFindReservation_success() {
        Long id = 1L; // TODO: Change this value to a valid id.
        Reservation reservation = new Reservation();
        when(reservationRepository.findById(id)).thenReturn(Optional.of(reservation));

        Reservation result = reservationRestController.findReservation(id);

        verify(reservationRepository, times(1)).findById(id);
        assertEquals(reservation, result);
    }

    @Test
    public void testFindReservation_reservationNotFound() {
        Long id = 2L; // TODO: Change this value to an id that does not exist.
        when(reservationRepository.findById(id)).thenReturn(Optional.empty());

        assertThrows(ReservationNotFound.class, () -> reservationRestController.findReservation(id));

        verify(reservationRepository, times(1)).findById(id);
    }
}
