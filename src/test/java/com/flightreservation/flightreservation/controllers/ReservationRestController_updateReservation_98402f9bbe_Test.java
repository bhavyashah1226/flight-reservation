// Test generated by RoostGPT for test flightReservation using AI Type Open AI and AI Model gpt-4

package com.flightreservation.flightreservation.controllers;

import com.flightreservation.flightreservation.domains.Reservation;
import com.flightreservation.flightreservation.dto.ReservationUpdateRequest;
import com.flightreservation.flightreservation.exceptions.ReservationNotFound;
import com.flightreservation.flightreservation.repositories.ReservationRepository;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

public class ReservationRestController_updateReservation_98402f9bbe_Test {

    @Mock
    private ReservationRepository reservationRepository;

    @InjectMocks
    private ReservationRestController reservationRestController;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testUpdateReservation_success() {
        ReservationUpdateRequest request = new ReservationUpdateRequest();
        request.setId(1L);
        request.setCheckedIn(true);
        request.setNumberOfBags(2);

        Reservation reservation = new Reservation();
        reservation.setId(1L);

        when(reservationRepository.findById(any(Long.class))).thenReturn(Optional.of(reservation));
        when(reservationRepository.save(any(Reservation.class))).thenReturn(reservation);

        Reservation updatedReservation = reservationRestController.updateReservation(request);

        Assertions.assertEquals(updatedReservation.getNumberOfBags(), request.getNumberOfBags());
        Assertions.assertEquals(updatedReservation.isCheckedIn(), request.isCheckedIn());
    }

    @Test
    public void testUpdateReservation_reservationNotFound() {
        ReservationUpdateRequest request = new ReservationUpdateRequest();
        request.setId(1L);

        when(reservationRepository.findById(any(Long.class))).thenReturn(Optional.empty());

        Assertions.assertThrows(ReservationNotFound.class, () -> {
            reservationRestController.updateReservation(request);
        });
    }
}
