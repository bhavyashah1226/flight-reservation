// Test generated by RoostGPT for test flightReservation using AI Type Open AI and AI Model gpt-4

package com.flightreservation.flightreservation.controllers;

import com.flightreservation.flightreservation.domains.Reservation;
import com.flightreservation.flightreservation.dto.ReservationUpdateRequest;
import com.flightreservation.flightreservation.exceptions.ReservationNotFound;
import com.flightreservation.flightreservation.repositories.ReservationRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class ReservationRestController_findReservation_5d1841c2ee_Test {

    @Mock
    private ReservationRepository reservationRepository;

    @InjectMocks
    private ReservationRestController reservationRestController;

    private final Long reservationId = 1L;

    private final Reservation reservation = new Reservation();

    @BeforeEach
    void setUp() {
        reservation.setId(reservationId);
    }

    @Test
    public void testFindReservation_success() {
        when(reservationRepository.findById(reservationId)).thenReturn(Optional.of(reservation));

        Reservation result = reservationRestController.findReservation(reservationId);

        assertEquals(reservation, result);
    }

    @Test
    public void testFindReservation_notFound() {
        when(reservationRepository.findById(reservationId)).thenReturn(Optional.empty());

        assertThrows(ReservationNotFound.class, () -> reservationRestController.findReservation(reservationId));
    }
}
