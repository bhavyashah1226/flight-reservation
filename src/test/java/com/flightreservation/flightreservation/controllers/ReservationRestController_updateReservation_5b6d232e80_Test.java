// Test generated by RoostGPT for test flightReservation using AI Type Open AI and AI Model gpt-4

package com.flightreservation.flightreservation.controllers;

import com.flightreservation.flightreservation.domains.Reservation;
import com.flightreservation.flightreservation.dto.ReservationUpdateRequest;
import com.flightreservation.flightreservation.exceptions.ReservationNotFound;
import com.flightreservation.flightreservation.repositories.ReservationRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.verify;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class ReservationRestController_updateReservation_5b6d232e80_Test {

    @Mock
    private ReservationRepository reservationRepository;

    @InjectMocks
    private ReservationRestController reservationRestController;

    private ReservationUpdateRequest reservationUpdateRequest;
    private Reservation reservation;

    @BeforeEach
    public void setup() {
        reservationUpdateRequest = new ReservationUpdateRequest();
        reservationUpdateRequest.setId(1L);
        reservationUpdateRequest.setCheckedIn(true);
        reservationUpdateRequest.setNumberOfBags(2);

        reservation = new Reservation();
        reservation.setId(1L);
        reservation.setCheckedin(true);
        reservation.setNumberOfBags(2);
    }

    @Test
    public void testUpdateReservation_success() {
        given(reservationRepository.findById(1L)).willReturn(Optional.of(reservation));
        Reservation updatedReservation = reservationRestController.updateReservation(reservationUpdateRequest);
        assertEquals(2, updatedReservation.getNumberOfBags());
        assertTrue(updatedReservation.isCheckedin());
        verify(reservationRepository).save(reservation);
    }

    @Test
    public void testUpdateReservation_reservationNotFound() {
        given(reservationRepository.findById(1L)).willReturn(Optional.empty());
        Exception exception = assertThrows(ReservationNotFound.class, () -> {
            reservationRestController.updateReservation(reservationUpdateRequest);
        });
        assertEquals("No reservation exist with id "+reservationUpdateRequest.getId(), exception.getMessage());
    }
}
