// Test generated by RoostGPT for test flightReservation using AI Type Open AI and AI Model gpt-4

package com.flightreservation.flightreservation.controllers;

import com.flightreservation.flightreservation.domains.Reservation;
import com.flightreservation.flightreservation.dto.ReservationUpdateRequest;
import com.flightreservation.flightreservation.exceptions.ReservationNotFound;
import com.flightreservation.flightreservation.repositories.ReservationRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@SpringBootTest
public class ReservationRestController_updateReservation_5b6d232e80_Test {

    @InjectMocks
    ReservationRestController controller;

    @Mock
    ReservationRepository reservationRepository;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testUpdateReservation_Success() {
        ReservationUpdateRequest request = new ReservationUpdateRequest();
        request.setId(1L);
        request.setNumberOfBags(2);
        request.setCheckedIn(true);

        Reservation reservation = new Reservation();
        reservation.setId(1L);

        when(reservationRepository.findById(1L)).thenReturn(Optional.of(reservation));
        when(reservationRepository.save(any(Reservation.class))).thenReturn(reservation);

        Reservation updatedReservation = controller.updateReservation(request);

        verify(reservationRepository, times(1)).findById(1L);
        verify(reservationRepository, times(1)).save(any(Reservation.class));

        assertEquals(1L, updatedReservation.getId());
        assertEquals(2, updatedReservation.getNumberOfBags());
        assertTrue(updatedReservation.isCheckedIn());
    }

    @Test
    public void testUpdateReservation_ReservationNotFound() {
        ReservationUpdateRequest request = new ReservationUpdateRequest();
        request.setId(1L);
        when(reservationRepository.findById(1L)).thenReturn(Optional.empty());

        Exception exception = assertThrows(ReservationNotFound.class, () -> {
            controller.updateReservation(request);
        });

        verify(reservationRepository, times(1)).findById(1L);
        assertEquals("No reservation exist with id " + request.getId(), exception.getMessage());
    }
}
