// Test generated by RoostGPT for test flightReservation using AI Type Open AI and AI Model gpt-4

package com.flightreservation.flightreservation.controllers;

import com.flightreservation.flightreservation.domains.Flight;
import com.flightreservation.flightreservation.domains.Reservation;
import com.flightreservation.flightreservation.dto.ReservationRequest;
import com.flightreservation.flightreservation.exceptions.FlightNotFound;
import com.flightreservation.flightreservation.repositories.FlightRepository;
import com.flightreservation.flightreservation.services.ReservationService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.ui.ModelMap;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class ReservationController_completeReservation_0391088ff1_Test {

    @InjectMocks
    private ReservationController reservationController;

    @Mock
    private ReservationService reservationService;

    private ReservationRequest reservationRequest;
    private ModelMap modelMap;
    private Reservation reservation;

    @BeforeEach
    public void setup() {
        reservationRequest = new ReservationRequest();
        modelMap = new ModelMap();
        reservation = new Reservation();
        reservation.setId(1L);
    }

    @Test
    public void testCompleteReservation_Success() {
        when(reservationService.bookFlight(any(ReservationRequest.class))).thenReturn(reservation);

        String result = reservationController.completeReservation(reservationRequest, modelMap);

        assertEquals("reservation/reservationConfirmation", result);
        assertEquals("Reservation created successfully and the reservation id is 1", modelMap.get("msg"));
    }

    @Test
    public void testCompleteReservation_Failure() {
        when(reservationService.bookFlight(any(ReservationRequest.class))).thenThrow(new FlightNotFound("Flight not found"));

        try {
            reservationController.completeReservation(reservationRequest, modelMap);
        } catch (FlightNotFound ex) {
            assertEquals("Flight not found", ex.getMessage());
        }
    }
}
