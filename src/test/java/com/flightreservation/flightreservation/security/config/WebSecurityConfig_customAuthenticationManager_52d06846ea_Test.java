// Test generated by RoostGPT for test flightReservation using AI Type Open AI and AI Model gpt-4

package com.flightreservation.flightreservation.security.config;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class WebSecurityConfig_customAuthenticationManager_52d06846ea_Test {

    @InjectMocks
    private WebSecurityConfig webSecurityConfig;

    @Mock
    private AuthenticationManager authenticationManager;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCustomAuthenticationManager_Success() throws Exception {
        Authentication authentication = mock(Authentication.class);

        when(authenticationManager.authenticate(authentication)).thenReturn(authentication);

        AuthenticationManager customAuthenticationManager = webSecurityConfig.customAuthenticationManager();
        Authentication authenticated = customAuthenticationManager.authenticate(authentication);

        assertEquals(authenticated, authentication);
        verify(authenticationManager, times(1)).authenticate(authentication);
    }

    @Test
    public void testCustomAuthenticationManager_Failure() throws Exception {
        Authentication authentication = mock(Authentication.class);

        when(authenticationManager.authenticate(authentication)).thenThrow(new AuthenticationException("Authentication failed") {});

        AuthenticationManager customAuthenticationManager = webSecurityConfig.customAuthenticationManager();

        assertThrows(AuthenticationException.class, () -> customAuthenticationManager.authenticate(authentication));
        verify(authenticationManager, times(1)).authenticate(authentication);
    }
}
