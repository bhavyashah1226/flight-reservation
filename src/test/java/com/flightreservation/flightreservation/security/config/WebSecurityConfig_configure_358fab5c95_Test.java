// Test generated by RoostGPT for test flightReservation using AI Type Open AI and AI Model gpt-4

package com.flightreservation.flightreservation.security.config;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.FilterChainProxy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestBuilders.get;
import static org.springframework.security.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.setup.SharedHttpSessionConfigurer.sharedHttpSession;

public class WebSecurityConfig_configure_358fab5c95_Test {

    @InjectMocks
    WebSecurityConfig webSecurityConfig;

    @Mock
    HttpSecurity httpSecurity;

    MockMvc mockMvc;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
        mockMvc = MockMvcBuilders
                .standaloneSetup(webSecurityConfig)
                .apply(sharedHttpSession())
                .build();
    }

    @Test
    public void testConfigure_whenAccessingPermittedPaths_thenReturnsOk() throws Exception {
        mockMvc.perform(get("/showReg"))
                .andExpect(status().isOk());
        mockMvc.perform(get("/index.html"))
                .andExpect(status().isOk());
        mockMvc.perform(get("/registerUser"))
                .andExpect(status().isOk());
        mockMvc.perform(get("/login"))
                .andExpect(status().isOk());
    }

    @Test
    public void testConfigure_whenAccessingAdminPaths_withoutAdminRights_thenReturnsForbidden() throws Exception {
        mockMvc.perform(get("/admin/showAddFlight"))
                .andExpect(status().isForbidden());
        mockMvc.perform(get("/admin/admin/addFlight"))
                .andExpect(status().isForbidden());
    }
}
