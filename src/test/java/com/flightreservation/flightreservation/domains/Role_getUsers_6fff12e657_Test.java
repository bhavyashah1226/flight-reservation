// Test generated by RoostGPT for test flightReservation using AI Type Open AI and AI Model gpt-4

package com.flightreservation.flightreservation.domains;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.core.GrantedAuthority;

import javax.persistence.Entity;
import javax.persistence.ManyToMany;
import java.util.HashSet;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class Role_getUsers_6fff12e657_Test {
    
    @Mock
    private Role role;

    private Set<User> users;

    @BeforeEach
    public void setUp() {
        users = new HashSet<>();
        User user1 = new User();
        user1.setId(1);
        user1.setUsername("testUser1");
        users.add(user1);

        User user2 = new User();
        user2.setId(2);
        user2.setUsername("testUser2");
        users.add(user2);

        when(role.getUsers()).thenReturn(users);
    }

    @Test
    public void testGetUsers_success() {
        Set<User> actualUsers = role.getUsers();
        assertEquals(users, actualUsers, "The expected and actual users should match");
    }

    @Test
    public void testGetUsers_noUsers() {
        users.clear();
        when(role.getUsers()).thenReturn(users);
        Set<User> actualUsers = role.getUsers();
        assertEquals(users, actualUsers, "The expected and actual users should match when no users are present");
    }
}
